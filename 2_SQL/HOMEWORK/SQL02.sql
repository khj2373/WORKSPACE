--01.
SELECT STUDENT_NO AS "학번", STUDENT_NAME AS "이름", ENTRANCE_DATE AS "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO = 002
ORDER BY ENTRANCE_DATE;

--02.
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE LENGTH(PROFESSOR_NAME) != 3;

--03.
SELECT PROFESSOR_NAME AS "교수이름",
        EXTRACT(YEAR FROM SYSDATE) - (1900 + TO_NUMBER(SUBSTR(PROFESSOR_SSN, 1, 2))) AS "나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8, 1) = 1
ORDER BY 나이;

--04.
SELECT SUBSTR(PROFESSOR_NAME, 2) AS "이름"
FROM TB_PROFESSOR;

--05.
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) -
        CASE
            WHEN SUBSTR(STUDENT_SSN, 1, 2) <= TO_CHAR(SYSDATE, 'YY') THEN
                2000 + TO_NUMBER(SUBSTR(STUDENT_SSN, 1, 2))
            ELSE
                1900 + TO_NUMBER(SUBSTR(STUDENT_SSN, 1, 2))
        END + 1 < 20;
        
--06.
SELECT TO_CHAR(TO_DATE('20201225'), 'DAY')
FROM DUAL;

--07.
SELECT TO_CHAR(TO_DATE('99/10/11', 'YY/MM/DD'), 'DAY'),
        TO_CHAR(TO_DATE('49/10/11', 'YY/MM/DD'), 'DAY')
FROM DUAL;

SELECT TO_CHAR(TO_DATE('99/10/11', 'RR/MM/DD'), 'DAY'),
        TO_CHAR(TO_DATE('49/10/11', 'RR/MM/DD'), 'DAY')
FROM DUAL;

--08.
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_NO, 1, 1) != 'A';

--09.
SELECT ROUND(AVG(POINT), 1) AS "평점"
FROM TB_STUDENT
JOIN TB_GRADE USING (STUDENT_NO)
WHERE STUDENT_NO = 'A517178';

--10.
SELECT DEPARTMENT_NO, COUNT(STUDENT_NO)
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

--11.
SELECT COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

--12.
SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", ROUND(AVG(POINT), 1) AS "년도별 평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)
ORDER BY SUBSTR(TERM_NO, 1, 4);

--13.
SELECT S.DEPARTMENT_NO AS "학과코드명", COUNT(ABSENCE_YN) AS "휴학생 수"
FROM (SELECT DISTINCT DEPARTMENT_NO
        FROM TB_STUDENT) S
LEFT JOIN TB_STUDENT T ON (S.DEPARTMENT_NO = T.DEPARTMENT_NO AND T.ABSENCE_YN ='Y')
GROUP BY S.DEPARTMENT_NO
ORDER BY S.DEPARTMENT_NO;

--14.
SELECT STUDENT_NAME AS "동일이름", COUNT(STUDENT_NAME) AS "동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(STUDENT_NAME) >= 2
ORDER BY STUDENT_NAME;

--15.
SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", SUBSTR(TERM_NO, 5, 6) AS "학기", ROUND(AVG(POINT), 1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 6)
ORDER BY SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 6);

SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", ' ' AS "학기", ROUND(AVG(POINT), 1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)
ORDER BY SUBSTR(TERM_NO, 1, 4);

SELECT ' ' AS "년도", ' ' AS "학기", ROUND(AVG(POINT), 1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113';

------------------------------------------------------------------------------------------

SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", SUBSTR(TERM_NO, 5, 6) AS "학기", ROUND(AVG(POINT), 1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 6)

UNION ALL

SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", ' ' AS "학기", ROUND(AVG(POINT), 1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)

UNION ALL

SELECT ' ' AS "년도", ' ' AS "학기", ROUND(AVG(POINT), 1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'

ORDER BY "년도", "학기";

--문제처럼 정렬을 못하겠어요..

